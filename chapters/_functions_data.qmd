
```{r}
#| output: false
#| echo: false
#| eval: true


library(tidyverse)
library(truncnorm)
library(extraDistr)
library(EnvStats)
library(janitor)
library(kde1d)
library(kableExtra)

set.seed(123)
n<-100000


#sample from the beta distribution by specifying the mean proportion an its standard deviation
sample_beta <- function(mean_val, sd_val) {
  n <- 100000
  # calculate alpha and beta parameters
  var_val <- sd_val^2
  alpha <- ((1 - mean_val) / var_val - 1 / mean_val) * mean_val^2
  beta <- alpha * (1 / mean_val - 1)
  # Check and adjust alpha and beta to ensure they are valid for the beta distribution
  if (alpha <= 0 | beta <= 0) {
    stop("Invalid shape parameters: alpha and beta must be greater than 0.")
  }
  # sample from beta distribution
  return(rbeta(n, alpha, beta))
}


find_good_sd_binary <- function(mean_val,
                                fifth_percentile, ninety_fifth_percentile,
                                tol=0.001, sd_val=-1) {
  # Set start value
  if (sd_val == -1){
    sd_val=0.2
  }
  # Check if the provided parameters are valid
  if (sd_val^2 >= mean_val * (1 - mean_val)) {
    stop("Invalid sd_val: sd_val^2 must be less than mean_val * (1 - mean_val).")
  }
  
  # Initialize the search range
  lower_bound <- 0
  upper_bound <- sqrt(mean_val * (1 - mean_val))
  
  # Perform binary search to find the optimal sd_val
  while (abs(upper_bound - lower_bound) > tol) {
    sd_val <- (lower_bound + upper_bound) / 2
    samples <- sample_beta(mean_val, sd_val)
    prop_between_given_percentiles <- sum(
      samples > fifth_percentile & samples < ninety_fifth_percentile) / length(samples)
    
    if (abs(prop_between_given_percentiles - 0.9) < tol) {
      return(sd_val)
    } else if (prop_between_given_percentiles < 0.9) {
      upper_bound <- sd_val
    } else {
      lower_bound <- sd_val
    }
  }
  return((lower_bound + upper_bound) / 2)
}

# sample from dirichlet distribution
sample_dirichlet<-function(a=0, b=0, x=0, y=0){
  if (sum(c(a, b, x, y)) != 100){
    print("Arguments do not sum to 100! Their sum is: ")
    print(sum(c(a, b, x, y)))
  } else {
    n <- 100000
    non_zero_args = c(a, b, x, y)[c(a, b, x, y) != 0]
    return(rdirichlet(n, non_zero_args))
  }
}


#sample from lognormal distribution
sample_logn<- function(mean, sd) {
  logn_dist<-rlnorm(n = 100000, meanlog = log(mean^2 / sqrt(mean^2 + sd^2)),
                    sdlog = sqrt(log(1 + (sd^2/mean^2))))
  return(logn_dist)
}

# sample from truncated log-normal distribution
sample_trunclogn <- function(n_value, mean, sd, min_value, max_value){
  trunclogn_dist<-rlnormTrunc(n = n_value, meanlog = log(mean^2 / sqrt(mean^2 + sd^2)),
                    sdlog = sqrt(log(1 + (sd^2/mean^2))),
                    min=min_value, max=max_value)
  return(trunclogn_dist)
}

show_table=function(x){
kable(x, table.attr = 'data-quarto-disable-processing="true"') %>%
    kableExtra::kable_styling(full_width=FALSE, position="center", font_size=12,
                  bootstrap_options = c("condensed")) 
}

# Define the expected proportions for each practice
ext_mean <- 0.112
semi_mean <- 0.164
int_mean <- 0.714
super_mean <- 0.01

# Sample from the Dirichlet distribution
prop_sample<-data.frame(sample_dirichlet(ext_mean*100, semi_mean*100, 
                                         int_mean*100, super_mean*100))
# we multiply by 100 to make the distributions less noisy
colnames(prop_sample)<-c("Ext", "Semi", "Int", "Super")

# Label pain categories
paincategories<-c("Excruciating", "Disabling", "Hurtful", "Annoying")

# define pain category weights
Annoying_Weight<-runif(n = 100000, min = (1/500), max = (1/100))
Hurtful_Weight<-runif(n = 100000, min = (1/50), max = (1/5))
Disabling_Weight <- 1
Excruciating_Weight<-runif(n = 100000, min = 5, max = 1000)

# Load data samples of number of shrimp that die on farms, probability of reaching life stages, and average days lived.
prop_allspecies_dof<-readRDS(file="../data/prop_allspecies_dof.RData")
stage_probabilities<-readRDS(file="../data/stage_probabilities.RData")
average_days_lived<-readRDS("../data/average_days_lived.RData")

# load broodstock proportion

allspecies_dof<-readRDS(file="../data/allspecies_dof.RData")
allspecies_dof<-as.data.frame(allspecies_dof)

vannamei_eggs<-runif(100000, min=100000, max=250000) # according to FAO
vannamei_broodstock<-allspecies_dof$vannamei_dof/vannamei_eggs*0.5 # assuming only half of eggs hatch. 
vannamei_broodstock_prop<-vannamei_broodstock/(vannamei_broodstock+allspecies_dof$vannamei_dof)

monodon_eggs<-runif(100000, min=500000, max=750000) # according to FAO
monodon_broodstock<-allspecies_dof$monodon_dof/monodon_eggs*0.5
monodon_broodstock_prop<-monodon_broodstock/(monodon_broodstock+allspecies_dof$monodon_dof)

otherpen_eggs<-runif(100000, min=200000, max=1000000) # according to Table 4.6a, Wickens and Lee (2002)
otherpen_broodstock<-allspecies_dof$otherpen_dof/otherpen_eggs*0.5
otherpen_broodstock_prop<-otherpen_broodstock/(otherpen_broodstock+allspecies_dof$otherpen_dof)

female_broodstock_prop<-readRDS(file="../data/female_broodstock_prop.RData")

# load sold live proportion
sold_live<-runif(n, min=0.01, max=0.02)
```

