---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Results {.unnumbered}

Now we put the results from each welfare threat into one table.

```{r}
#| echo: false
#| output: false
#| eval: true

options(scipen=999)

library(tidyverse)
library(janitor)
library(ggthemes)
library(ggplot2)
library(patchwork)


my_files <- list.files(path="../results", pattern='\\.csv$', full.names=TRUE)

all_csv <- lapply(my_files, read.csv,)

names(all_csv) <- gsub(".csv","",
                       list.files("../results", pattern='\\.csv$', full.names = FALSE), fixed = TRUE)

list2env(all_csv, globalenv())

library(kableExtra)


show_table=function(x){
kable(x, table.attr = 'data-quarto-disable-processing="true"', align="c") %>%
    kableExtra::kable_styling(full_width=FALSE, position="center", font_size=12,
                  bootstrap_options = c("condensed")) 
}

```

```{r}

## Results

#Putting all the outputs into a table:

comparison_table<-rbind(hunger_summary, malnu_summary, lowdo_summary, hitemp_summary, lowtemp_summary, salin_summary, ph_summary, ammon_summary, pollute_summary, density_summary, subst_summary, pred_summary, ablation_summary, nowater_summary, water_summary, harvest_summary, slaught_summary, disease_summary)

colnames(comparison_table)<-c("welfare_threat","5%", "50%", "95%", "Mean")

# keeping only the disabling-equivalent pain estimations, which occur every 5th row
diseq_results<-comparison_table %>%
  dplyr::filter(str_detect(welfare_threat, "Disabling-Equivalent"))

# arranging the rows in descending order and adding a total row.
results<-as.data.frame(diseq_results, rownames=TRUE) %>%
  arrange(desc(Mean)) %>%
  adorn_totals("row") %>%
  column_to_rownames("welfare_threat") %>%
  mutate(`5%` = signif(`5%`, pmax(2,trunc(log10(`5%`)+1))), # rounding all results to 2 significant figure, except those with more than two significant digits before the decimal point (log10 counts the digits)
         `50%` = signif(`50%`, pmax(2,trunc(log10(`50%`)+1))),
         `95%` = signif(`95%`, pmax(2,trunc(log10(`95%`)+1))),
          Mean = signif(Mean, pmax(2,trunc(log10(Mean)+1))),
         `Mean (minutes)`=signif(Mean*60, pmax(2,trunc(log10(Mean*60)+1)))) %>% # displaying small results in minutes
  mutate(`Mean (minutes)` = ifelse(Mean>1, "â€”", `Mean (minutes)`)) %>% # removing display of large results in minutes
  mutate(across(where(is.numeric), as.character))

# cleaning up the row names
rownames(results)<-gsub("Disabling-Equivalent_","", rownames(results))
rownames(results)<-gsub("_"," ", rownames(results))


# print results
show_table(results) %>%
  row_spec(19, bold = T, background = "lightgrey")

```


We also want to see the results broken down by pain type.

```{r}

results_byintensity<-comparison_table %>%
  dplyr::filter(!str_detect(welfare_threat, "Disabling-Equivalent")) %>%
  separate_wider_delim(welfare_threat, "_", names=c("pain_type", "welfare_threat"))

percent_byintensity<-results_byintensity %>%
  group_by(welfare_threat) %>%
  mutate(percent=Mean/sum(Mean))

percent_total<-percent_byintensity %>%
  group_by(welfare_threat) %>%
  mutate(total=sum(Mean)) %>%
  mutate_at(.vars = vars(total), .funs = ~ case_when(
    abs(.x) > 1 ~ round(.x, digits = 0), TRUE ~ round(.x, digits = 4))) %>%
  mutate_at(.vars = vars(total), .funs = ~ case_when(
    abs(.x) > 0.001 ~ round(.x, digits = 2), TRUE ~ round(.x, digits = 4)))

total_byintensity<-reframe(results_byintensity, .by=pain_type, 
                            total=sum(Mean), 
                            total.95=sum(`95%`),
                           total.50=sum(`50%`),
                            total.5=sum(`5%`)) %>%
  mutate(percent.total=total/sum(total))

percent_overall<-data.frame(
  pain_type=c("Annoying", "Hurtful", "Disabling", "Excruciating"),
  welfare_threat = rep("Total", 4), 
  `5%`=total_byintensity$total.5,
  `50%`=total_byintensity$total.50,
  `95%`=total_byintensity$total.95,
  Mean=total_byintensity$total,
  percent=total_byintensity$percent.total,
  total=rep(sum(total_byintensity$total), 4))
colnames(percent_overall)<-colnames(percent_total)

results_paintype<-rbind(percent_total, percent_overall)

results_paintype$welfare_threat<-gsub("subst", "Lack of substrate", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("dens", "High density", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("salin", "Low salinity", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("ammon", "High un-ionized ammonia", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("ph", "Nonoptimal pH", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("lowDO", "Low dissolved oxygen", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("hunger", "Hunger", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("hitemp", "High temperature", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("malnu", "Malnutrition", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("nowater", "Waterless transport", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("water", "Water-based transport" , results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("pollute", "Pollutants", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("harvest", "Harvest", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("slaught", "Ice-Slurry slaughter", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("ablation", "Eyestalk ablation", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("pred", "Predators", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("lowtemp", "Low temperature", results_paintype$welfare_threat)
results_paintype$welfare_threat<-gsub("disease", "Biosecurity failures", results_paintype$welfare_threat)

results_paintype$welfare_threat<-factor(results_paintype$welfare_threat,
                                        levels=c(rownames(results)))

results_paintype$pain_type<-factor(results_paintype$pain_type, levels=c("Excruciating", "Disabling", "Hurtful", "Annoying"))


```

Now we can plot the results:
```{r}

results_paintype$welfare_threat<-factor(results_paintype$welfare_threat, levels=c(unique(rownames(results))))

results_diseq<-results %>%
   rownames_to_column(var="welfare_threat")

results_diseq$welfare_threat<-factor(results_diseq$welfare_threat,
                                    levels=c(unique(rownames(results))))
 
results_diseq$Pain<-rep("Disabling-equivalent")

results_diseq$Pain<-factor(results_diseq$Pain, levels=c(
  "Disabling-equivalent", "Excruciating", "Disabling", "Hurtful", "Annoying"))

# absolute values
paintype.plot<-ggplot(results_paintype) +
  geom_pointrange(aes(y=fct_rev(welfare_threat), x=Mean, xmin=`5%`, xmax=`95%`, color=pain_type), 
                  position = position_dodge2(width = 1, padding = 2), 
                  stat="identity", show.legend=FALSE,
                  size=1, linewidth=1) +
  facet_wrap(~fct_rev(pain_type), scales="free_x", ncol=3) +
  scale_color_manual(values=c("#D55E00", "#E69F00", "#56B4E9", "#0072B2")) +
  labs(y="", x="Hours", color="Pain intensity") +
  theme(axis.title.x = element_text(hjust=0.15),
        axis.text=element_text(size=12),
        strip.text = element_text(size=13))

diseq.plot<-ggplot(results_diseq) +
  geom_pointrange(aes(y=fct_rev(welfare_threat), x=as.numeric(Mean), xmin=as.numeric(`5%`), xmax=as.numeric(`95%`), color=Pain), na.rm=TRUE, position = position_dodge2(width = 1, padding = 2), stat="identity", show.legend = TRUE, size=1, linewidth=1) +
  labs(y="", x="Hours", color="Pain intensity    ") +
  scale_color_manual(values=c(
    "gray30", "#D55E00", "#E69F00", "#56B4E9", "#0072B2"), drop=FALSE) +
  theme(legend.position="bottom",
        legend.text = element_text(
          margin = margin(r = 10, l=5, unit = "pt"), size=13),
        legend.title=element_text(size=13),
        axis.text.y = element_blank(),
        axis.text.x=element_text(size=12),
        axis.ticks.y=element_blank(),
        plot.background = element_blank(),
        strip.text = element_text(size=13))+
  facet_wrap(~Pain)

layout <- c(
  area(t = 1, l = 1, b = 200, r = 110),
  area(t = 105, l = 36, b = 200, r = 110)
)

# using the patchwork package to arrange the plots
fig1<-paintype.plot + diseq.plot +
  plot_annotation(caption="Circles are means, lines are 90% credible intervals. Totals are means and credible intervals summed.") +
  plot_layout(design = layout, guides="collect") & theme(legend.position = 'bottom', plot.caption = element_text(hjust = 0.7, size=12),
  plot.margin = unit(c(top=.05,r=.1,b=.05,l=-.4), "cm")) 

fig1

#ggsave(filename="../results/fig1.png", plot=fig1, width=13, height=8.5)
```

We also plot the proportion of pain of each intensity for each welfare threat:
```{r}

# stacked percentage bars
fig3<-ggplot(results_paintype) +
  geom_bar(aes(y=fct_rev(welfare_threat), x=percent, fill=pain_type), position ="stack", stat="identity") +
  scale_fill_manual(values=c("#D55E00", "#E69F00", "#56B4E9", "#0072B2")) +
    geom_text(aes(y=welfare_threat, x=1.01, label=formatC(total, format="fg"),
                  hjust=0) , na.rm=TRUE, fontface=c(rep("plain", 72),
                                                      rep("bold", 4 )), size=5) +
  geom_text(aes(y=12, x=1.1), label=expression(bold('Total hours')), 
            hjust=0, size=5, lineheight = 0.7, angle=270) +
  theme( panel.grid.major = element_line(color="white"),
         panel.grid.minor = element_line(colour = "white"),
         panel.background = element_rect(fill = "white"),
         axis.ticks.y = element_blank(),
         axis.text.y = element_text(
           face=c( "bold", rep("plain", 18)), size=12, margin = margin(r = 0)),
         axis.text.x=element_text(size=13),
         axis.title.x=element_text(size=13, hjust=0.425),
         legend.position="bottom", 
         plot.margin=margin(r=1, l=1, t=20),
         legend.text=element_text(
          margin = margin(r = 10, l=5, unit = "pt"), size=13),
         legend.title=element_text(size=13)) +
  labs(x="Proportion of pain", y="", fill="Pain Intensity") +
  scale_x_continuous(limits=c(0,1.15), expand=c(0,0), breaks = c(0.0, 0.25, 0.5, 0.75, 1)) +
  coord_cartesian(xlim=c(0,1.15), clip = 'off') +
  scale_y_discrete(expand=c(0,0))
fig3

#ggsave(filename="../results/fig3.png", plot=fig3, width=9.5, height=5.5)
```


